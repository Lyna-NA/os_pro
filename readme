You can view the app here: https://replit.com/@LynaEL/ospro?v=1
@

<help>

	***WELCOME TO MY SHELL HELP***
	Class: Operating Systems ECOM4001

*List of help Commands supported:
>help cd
>help environ
>help dir
>help quit
>help pause
>help clear
>help echo
>help help
>help pwd
>help path
>help myshell
>help background execution / background
>help redirection
>help io redirection / i/o redirection
>help bat / batchfile
>help command
>help shell

@

<help cd>

-------	Linux Programmer's Manual -------

NAME	:	cd [directory]

DESCRIPTION	:	change the current default directory to [directory].
   e.g.    cd /home
   This command also change the PWD environment variable (use the command "pwd" to see it).
   #As to the directory path, type "help path" to get more information.

@

<help environ>

-------	Linux Programmer's Manual -------

NAME	:	environ

DESCRIPTION	:	list all the environment strings in screen 
			or into one file or more than one file as:
   e.g.   envieron     or     environ >b.txt     or    environ >b.txt >c.txt
   The token ">" can be replaced by ">>", 
   #type "help redirection" to see the difference of ">" and ">>".
   The file can be given by the full path as:
          /home/a.txt
   #As to the file path format, type "help path" to get more information.
   
@

<help dir>

-------	Linux Programmer's Manual -------

NAME	:	dir [directory] 

DESCRIPTION	:	list the contents of directory [directory]
   e.g.   dir  /home
   This command  is different from "cd", 
   it change neither the current default directory nor the PWD environment variable
   (use the command "pwd" to see it).
   #As to the directory path, type "help path" to get more information.
 
   *If the [directory] argument is not present, list the contents of the current directory. 
   *If the directory does not exist, a "Path Error" wil be reported in the screen.

   Moreover, you can use a directory path writen in a file as:
   e.g.   dir <a.txt
   And you can list the contents into a file or more than one file as:
   e.g.   dir >b.txt      or    dir >b.txt >c.txt
   The token ">" can be replaced by ">>", #type "help redirection" to see the difference of ">" and ">>".
   You can use both input redirection and output redirection as:
   e.g.   dir <a.txt >b.txt >c.txt
   The file can be given by the full path as:
          dir </home/username/a.txt
   #As to the file path format, type "help path" to get more information.

@

<help quit>

-------	Linux Programmer's Manual -------

NAME	:	quit

DESCRIPTION	:	Exit myshell, no argument is needed.

@
	
<help pause>

-------	Linux Programmer's Manual -------

NAME	:	pause

DESCRIPTION	:	display "Press Enter to continue..." and pause operation of the shell
			until the 'Enter' key is pressed (ignore any intervening non-'Enter' input).

@

<help clear>

-------	Linux Programmer's Manual -------

NAME	:   clear

DESCRIPTION  :  clear the screen, no arguments is needed.

@

<help echo>

-------	Linux Programmer's Manual -------

NAME	:	echo [comment]

DESCRIPTION	:	display [comment] on the display or output files followed by a new line.
	 		And multiple spaces/tabs will be reduced to a single space.
   e.g.   echo hello    world
   The words "hello world" will display in the screen.
   [comment] can be multiple words either typed from keyboard or read from one or more input files.
   e.g.   echo <a.txt   or   echo <a.txt <b.txt

   And you can display or output the contents into one file or more than one file:
   e.g.   echo hello world >c.txt  or  echo hello world >c.txt >d.txt
   The token ">" can be replaced by ">>", type "help redirection" to see the difference of ">" and ">>".
   You can use both input redirection and output redirection:
   e.g.   echo <a.txt <b.txt  >c.txt >d.txt
   The file can be given by the full path as:
          echo </home/a.txt  >/home/b.txt
   #As to the file path format, type "help path" to get more information.

@

<help help>

-------	Linux Programmer's Manual -------

NAME	:	help

DESCRIPTION	:	display the user manual. 
			Type "help [command]" to get the detail usage of a command as:
   e.g.    help dir 
   Type "help command" to see the internal commands.

   And you can display  or output the help information into one file or more than one file as:
   e.g.    help dir >c.txt     or    help dir >c.txt >d.txt
   The token ">" can be replaced by ">>", type "help redirection" to see the difference of ">" and ">>".
   The file can be given by the full path as:
           help dir >/home/a.txt
   #As to the file path format, type "help path" to get more information.	

@

<help pwd>

-------	Linux Programmer's Manual -------

NAME	:	pwd

DESCRIPTION	:	how the PWD environment variable.
 			If you want to list all the environment strings, use command "environ",
 			#type "help environ" to see.
   e.g.    help dir

   You can display or output the execution results into one file or more than one file as:
   e.g.     pwd test.bat >c.txt      or    pwd test.bat >c.txt >d.txt
   The token ">" can be replaced by ">>", type "help redirection" to see the difference of ">" and ">>".
   The file can be given by the full path as:
   e.g.     pwd   >/home/a.txt ,As to the file path format
   #type "help path" to get more information.then put results in outputfile.

@

<help path> <help ..> <help .> <help ~>

-------	Linux Programmer's Manual -------

NAME	:	help path , help .. , help . and help ~ can be used.

DESCRIPTION	:	.. stands for the parent directory of the current working directory,
			.  stands for the current working directory,
			~  stands for the home directory.
  If the filename or directoryname contains a white space, type "\ " :
  e.g.   echo  <a\ b  ( display the contents of file "a b" )
  Besides, there cannot be a white space in the path, or else a "Path Error" wil be reported in the screen.	

@

<help myshell>

------- Linux Programmer's Manual -------

NAME	:	myshell batchfile or myshell <batchfile

DESCRIPTION	:	keep reading a line of command from batchfile and execute.
   e.g.     myshell test.bat    or   myshell <test.bat
   where test.bat is a batchfile contains many lines of commands.

   You can display or output the execution results into one file or more than one file as:
   e.g.     myshell test.bat >c.txt      or    myshell test.bat >c.txt >d.txt
   The token ">" can be replaced by ">>", type "help redirection" to see the difference of ">" and ">>".
   The file can be given by the full path as:
   e.g.     myshell  </home/a.txt  >/home/username/b.txt
   #As to the file path format, type "help path" to get more information.then put results in outputfile.

@

<help background execution> <help background>

-------	Linux Programmer's Manual -------

NAME	:	background execution or background execution

DESCRIPTION	:
	Normally, when a command is execution, you have to wait for the completion and type another command.
	Especially, when the comand is executed from a batchfile, much time is wasted in waiting.
 	Background execution allows you not to wait for the execution.
 	An ampersand (&) at the end of the command line indicates that the shell should execute the command in background. 
	myshell supports background execution of programs.
 	An ampersand (&) at the end of the command line indicates that the shell should return to the command line prompt immediately after launching that program. 

@

<help redirection> 

-------	Linux Programmer's Manual -------

NAME	:	redirection

DESCRIPTION	:	 when the redirection token is < then the inputfile is opened if it exists,
 			 or a "Path Error" wil be reported in the screen.
     e.g.      cd  <test.txt 

     *when the redirection token is > then the outputfile is created if it does not exist and truncated if it does.
     e.g.      ls   >test.txt

     *when the redirection token is >> then outputfile is created if it does not exist and appended to if it does.
     e.g.    environ  >>test.txt

     Sometimes you can use more than one token to open several files as input or/and  output.
     e.g.   echo  <m.txt >n.txt         dir  >m.txt >n.txt 

     If the file cannot opened due to read permission or write permission, an "Open Error" wil be reported in the screen.

@

<help i/o redirection> <help io redirection>

-------	Linux Programmer's Manual -------

NAME	:	i/o redirection or io redirection

DESCRIPTION	:	myshell supports i/o-redirection on either or both stdin(standard input) and/or stdout(standard output).
    i.e. the command line:
    e.g.   programname arg1 arg2 <inputfile >outputfile
    this will execute the program programname with arguments arg1 and arg2,
    the stdin FILE stream replaced by inputfile and the stdout FILE stream replaced by outputfile. 

    The file can be given by the full path as:
    /home/username/test.txt

    #As to the file path format, type "help path" to get more information.

	Input redirection i.e. stdin redirection --> is possible for the internal commands: cd, dir, echo.
	Output redirection i.e. stdout redirection --> is possible for the internal commands: dir, environ,echo, help, pwd.

@

<help bat> <help batchfile>

-------	Linux Programmer's Manual -------

NAME	:	bat or batchfile

DESCRIPTION	:	myshell is able to take its command line input from a batchfile. 
	i.e. if the shell is invoked with a command line argument:
	e.g.   myshell test.bat
	then the batchfile -- test.bat -- is assumed to contain a set of command lines for the shell to process. 
	When the end of file is reached, the shell should exit. 
	Obviously, if the shell is invoked without a command line argument,
	it solicits input from the user via a prompt on the display.
	#See also "help myshell".	

@

<help command>

-------	Linux Programmer's Manual -------

DESCRIPTION	:	myshell supports the following commands:
			   cd    clr      dir    echo  environ
			    help  myshell  pause  pwd   quit   
	executable external file can include these commands as well. 
	Type "help [command]" to get the detail usage of each command.
	e.g.  help cd

@

<help shell>

-------	Linux Programmer's Manual -------

DESCRIPTION	:	The Shell or Command Line Interpreter is the fundamental user interface to an Operating System. 
	The shell:
	   * interprets the input,
	   * takes appropriate action, and
	   * finally prompts for more input.
	The shell can be used either
	   * as interactively - enter commands at the command prompt,
	or
	   * as an interpreter to execute a shell script.

	Code of shell is writen in 'straight' C using the compiler of gcc. 

@
